//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Gameplay/BeepBoopCharacter/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Gameplay.BeepBoopCharacter.Controls
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Mobility"",
            ""id"": ""7805c551-2b26-4404-8636-9e5979064591"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""35920a50-0012-48c0-88da-359669c4e17e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""fbce37db-c5ef-4055-ae48-d9e981796b4a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6cf258a2-5a70-4cf1-bd77-1c233352b539"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""23db3faa-6f10-4b3a-b56d-bfad236d166e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""87b7fe6a-5fba-475b-82a0-d64170e1e78c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f90e8d76-26a7-4104-9393-2112d47fa90e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""204b2e58-6c65-42f8-82af-632d88fff2e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3d261388-440a-4277-b7d3-3dd24761c09f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c211ce4b-ce8f-4e91-9b1e-0bf175b1bbe2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c22bd4a6-90c9-466b-a118-08371179b0da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""f313469e-6877-4d43-be0e-11038b0b8622"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fc0a1f30-2b13-4f24-b0b4-170bd80f7aad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d84367f4-f62e-408f-af42-dd4d50810cd2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb3c52ab-59ef-4376-a513-87fd00eb5441"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f009eca-0953-4bf3-a44f-b8b64dbbc678"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Mobility
            m_Mobility = asset.FindActionMap("Mobility", throwIfNotFound: true);
            m_Mobility_Move = m_Mobility.FindAction("Move", throwIfNotFound: true);
            m_Mobility_LookAround = m_Mobility.FindAction("LookAround", throwIfNotFound: true);
            m_Mobility_Jump = m_Mobility.FindAction("Jump", throwIfNotFound: true);
            // Interaction
            m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
            m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_Mobility.enabled, "This will cause a leak and performance issues, PlayerControls.Mobility.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Interaction.enabled, "This will cause a leak and performance issues, PlayerControls.Interaction.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mobility
        private readonly InputActionMap m_Mobility;
        private List<IMobilityActions> m_MobilityActionsCallbackInterfaces = new List<IMobilityActions>();
        private readonly InputAction m_Mobility_Move;
        private readonly InputAction m_Mobility_LookAround;
        private readonly InputAction m_Mobility_Jump;
        public struct MobilityActions
        {
            private @PlayerControls m_Wrapper;
            public MobilityActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Mobility_Move;
            public InputAction @LookAround => m_Wrapper.m_Mobility_LookAround;
            public InputAction @Jump => m_Wrapper.m_Mobility_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Mobility; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobilityActions set) { return set.Get(); }
            public void AddCallbacks(IMobilityActions instance)
            {
                if (instance == null || m_Wrapper.m_MobilityActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobilityActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @LookAround.started += instance.OnLookAround;
                @LookAround.performed += instance.OnLookAround;
                @LookAround.canceled += instance.OnLookAround;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IMobilityActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @LookAround.started -= instance.OnLookAround;
                @LookAround.performed -= instance.OnLookAround;
                @LookAround.canceled -= instance.OnLookAround;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IMobilityActions instance)
            {
                if (m_Wrapper.m_MobilityActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobilityActions instance)
            {
                foreach (var item in m_Wrapper.m_MobilityActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobilityActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobilityActions @Mobility => new MobilityActions(this);

        // Interaction
        private readonly InputActionMap m_Interaction;
        private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
        private readonly InputAction m_Interaction_Interact;
        public struct InteractionActions
        {
            private @PlayerControls m_Wrapper;
            public InteractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Interaction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
            public void AddCallbacks(IInteractionActions instance)
            {
                if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IInteractionActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IInteractionActions instance)
            {
                if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInteractionActions instance)
            {
                foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InteractionActions @Interaction => new InteractionActions(this);
        public interface IMobilityActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLookAround(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IInteractionActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
