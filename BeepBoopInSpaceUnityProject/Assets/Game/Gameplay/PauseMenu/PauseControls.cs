//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Gameplay/PauseMenu/PauseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Gameplay.PauseMenu
{
    public partial class @PauseControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PauseControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PauseControls"",
    ""maps"": [
        {
            ""name"": ""Pause"",
            ""id"": ""ecb62a6b-d28c-4694-b973-79efb37a007f"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""80dba927-5385-495e-80c8-bb196f589e0c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98b65073-81d5-414c-a170-7f96908e5825"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""536dae4f-4d1f-4cd6-97fc-bb69d67ade7e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdbc00b2-42ed-4ceb-abad-af2c508813ec"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Pause
            m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
            m_Pause_Toggle = m_Pause.FindAction("Toggle", throwIfNotFound: true);
        }

        ~@PauseControls()
        {
            UnityEngine.Debug.Assert(!m_Pause.enabled, "This will cause a leak and performance issues, PauseControls.Pause.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Pause
        private readonly InputActionMap m_Pause;
        private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
        private readonly InputAction m_Pause_Toggle;
        public struct PauseActions
        {
            private @PauseControls m_Wrapper;
            public PauseActions(@PauseControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Toggle => m_Wrapper.m_Pause_Toggle;
            public InputActionMap Get() { return m_Wrapper.m_Pause; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
            public void AddCallbacks(IPauseActions instance)
            {
                if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
            }

            private void UnregisterCallbacks(IPauseActions instance)
            {
                @Toggle.started -= instance.OnToggle;
                @Toggle.performed -= instance.OnToggle;
                @Toggle.canceled -= instance.OnToggle;
            }

            public void RemoveCallbacks(IPauseActions instance)
            {
                if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPauseActions instance)
            {
                foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PauseActions @Pause => new PauseActions(this);
        public interface IPauseActions
        {
            void OnToggle(InputAction.CallbackContext context);
        }
    }
}
